#!/usr/bin/env ruby
# **NOTE**: this file is generated by `dhall-render`.
# You should NOT edit it manually, your changes will be lost.

require 'open3'
require 'fileutils'

class Exec
	def capture2(*args)
		Open3.capture2(*args)
	end
end

class Listing
	attr_reader :sha, :ref
	def initialize(line)
		@line = line
		@sha, @ref = line.split("\t", 2)
	end

	def tag
		if @ref.start_with?('refs/tags')
			@ref.slice(10..-1)
		end
	end

	def version_order
		tag = self.tag || ''
		tag.split('.').map(&method(:extract_number))
	end

	def immutable
		# assume tags are immutable
		tag || @sha
	end

	def to_s
		immutable
	end

	def inspect
		to_s
	end

	private

	def extract_number(s)
		match = s.match(/([0-9]+)/)
		if match.nil?
			0
		else
			match.captures.first.to_i(10)
		end
	end
end

class ExplicitRef
	attr_reader :ref
	def initialize(ref)
		@ref = ref
	end

	def ls_args
		[@ref]
	end

	def extract(listings)
		raise "Couldn't extract a single ref from: #{listings.inspect}" unless listings.length == 1
		listing = listings.first
		listing.immutable
	end

	def to_s
		@ref
	end

	def inspect
		to_s
	end

	def ==(other)
		other.is_a?(ExplicitRef) && other.ref == ref
	end
end

# find the latest tag, instead of searching for a particular one
class LatestTagRef
	def ls_args
		[]
	end

	def extract(listings)
		listings = listings.sort_by(&:version_order)
		latest = listings.last
		if (latest.nil? || latest.tag.nil?)
		puts "No tags found, falling back to HEAD"
		listings.find{|listing| listing.ref == 'HEAD'}
		else
			latest.tag
		end
	end

	def ==(other)
		other.is_a?(LatestTagRef)
	end

	def to_s
		""
	end

	def inspect
		to_s
	end
end

class Spec
	attr_reader :repo, :ref
	def initialize(repo, ref, exec = Exec.new)
		@repo = repo
		@ref = ref
		@exec = exec
	end

	def unresolved?
		@resolved == nil
	end

	def to_s
		"#{@repo}:#{ref}"
	end

	def inspect
		"Spec(#{self})"
	end

	def resolved
		@resolved ||= begin
			puts "#{self}: resolving"
			token = ENV['GITHUB_TOKEN']
			creds = "x-access-token:#{token}@" unless token.nil?

			# Workaround for github actions, see https://github.com/timbertson/dhall-render/issues/6
			env = {'GIT_DIR' => '/dev/null'}
			stdout, status = @exec.capture2(env, 'git', 'ls-remote', "https://#{creds}github.com/#{@repo}", *@ref.ls_args)

			exit 1 unless status.success?
			lines = stdout.strip.lines.map(&:strip).map(&Listing.method(:new))
			resolved = @ref.extract(lines)
			puts " -> #{resolved}"
			resolved
		end
	end

	def self.parse(spec)
		parts = spec.split(':', 2)
		raise "Invalid spec: #{spec}" unless [1,2].include?(parts.size)
		repo, ref = parts
		ref = (ref.nil? || ref.empty?) ? LatestTagRef.new : ExplicitRef.new(ref)
		Spec.new(repo, ref)
	end

	def ==(other)
		other.is_a?(Spec) && other.repo == repo && other.ref == ref
	end
end

def guess_specs(options, contents)
	if options.fetch(:specs).empty?
		specs = contents.scan(/#{Regexp.escape('https://raw.githubusercontent.com/')}([^\/]+\/[^\/]+)\/([^\/]+)/).map do |match|
			repo, ref = match
			if ref.match(/^[0-9a-zA-Z]{32}/)
				ref = ExplicitRef.new('HEAD')
			else
				ref = LatestTagRef.new
			end
			Spec.new(repo, ref)
		end
		puts "Guessed specs:\n"
		specs.each {|spec| puts " - #{spec}"}
		specs
	else
		options.fetch(:specs)
	end
end

def capture_digests(paths, strict: true)
	return nil if paths.empty?
	return paths.map do |path|
		cmd = ['dhall', 'hash', '--file', path]
		stdout, status = Open3.capture2(*cmd)
		unless status.success?
			if strict
				puts("+ #{cmd.join(' ')}")
				puts("Failed to capture hash of #{path}")
				exit(1)
			else
				puts("Note: #{path} no longer evaluates; treating this as a change")
			end
		end
		stdout.strip()
	end
end

def process(path, options)
	initial = File.read(path)
	contents = initial
	freeze_cmd = options.fetch(:freeze)
	guess_specs(options, contents).each do |spec|
		contents = contents.gsub(/(\/#{Regexp.escape(spec.repo)}\/)[^\/]+/) do |x|
			match = Regexp.last_match
			prefix = match[1]
			"#{prefix}#{spec.resolved}"
		end
	end
	if contents != initial
		tmp_path = path + ".tmp"
		original_path = path + '.orig.tmp'
		File.write(tmp_path, contents)
		puts "#{path}: freezing"
		cmd = freeze_cmd + [tmp_path]
		puts("+ #{cmd.join(' ')}")
		unless system(*cmd)
			puts("Freeze failed")
			exit(1)
		end

		if_affects = options.fetch(:if_affects)
		initial_digests = capture_digests(if_affects)
		unless initial_digests.nil?
			FileUtils.copy_file(path, original_path)
		end

		File.rename(tmp_path, path)

		unless initial_digests.nil?
			final_digests = capture_digests(if_affects, strict: false)
			if initial_digests == final_digests
				puts("Digests unchanged after update; reverting")
				File.rename(original_path, path)
			else
				puts("At least one digest was affected")
				File.unlink(original_path)
			end
		end
	end
end

def main
	require 'optparse'

	default_freeze = [File.join(File.dirname($0), "fix"), "--freeze"]
	options = {
		freeze: default_freeze,
		specs: [],
		if_affects: [],
		allow_unused: false,
	}
	args = OptionParser.new do |p|
		p.banner = [
			"Usage: bump [OPTIONS] INPUT_FILES",
			"",
			"Example: `bump --to timbertson/dhall-render:master Render.dhall`",
			"Branches will be resolved to their current commit, tags will",
			"be left as-is (they are assumed immutable).",
			"",
			"If a file is modified, it'll be re-frozen to add digests.",
			"",
			"If you pass --if-affects (can be passed many times), the update is only",
			"kept when the `dhall hash` of at least one file is changed by the update.",
			"",
			"--to may be specified many times.",
			"It's a failure if the a spec is not used in any input file,",
			"unless --allow-unused is passed.",
			"",
			"If you don't pass any specs, they will be guessed for all found github imports:",
			" - if the current import refers to a commit, HEAD will be used",
			" - otherwise, the latest tag is used",
			"\n",
		].join("\n")
		p.on('--to REPO:REF', "Bump the given REPO to REF") do |spec|
			options[:specs] << Spec.parse(spec)
		end
		p.on('--allow-unused', "Allow unused specs") do ||
			options[:allow_unused] = true
		end
		p.on('--if-affects=FILE', "Revert the bump if it does not affect the `dhall digest` of FILE") do |path|
			options[:if_affects] << path
		end
		p.on('--freeze-cmd=CMD', "Override freeze command (default: #{default_freeze.join(" ")})") do |cmd|
			require 'shellwords'
			options[:freeze] = Shellwords.split(cmd)
		end
	end.parse(ARGV)
	raise "path required" if args.empty?

	args.each do |path|
		process(path, options)
	end
	unless options.fetch(:allow_unused)
		unused = options.fetch(:specs).select(&:unresolved?)
		raise "ERROR: repositories not used: #{unused.inspect}" unless unused.empty?
	end
end

if $PROGRAM_NAME == __FILE__
	main()
end
